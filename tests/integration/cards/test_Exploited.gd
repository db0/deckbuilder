extends "res://tests/HUT_Ordeal_CardTestClass.gd"

class TestExhaustion:
	extends "res://tests/HUT_Ordeal_DreamerEffectsTestClass.gd"
	var effect: String = Terms.ACTIVE_EFFECTS.exhaustion.name
	var amount = 2
	func _init() -> void:
		globals.test_flags["test_initial_hand"] = true
		effects_to_play = [
			{
				"name": effect,
				"amount": amount,
			}
		]
		test_card_names = [
			"Confidence",
			"Confidence",
			"Confidence",
		]


	func test_effect():
		var effect_node : CombatEffect = dreamer.active_effects.get_effect(effect)
		watch_signals(effect_node)
		execute_with_yield(cards[0])
		yield(yield_to(effect_node, "scripting_finished", 0.2), YIELD)
		yield(yield_to(cards[0], "scripts_executed", 2.2), YIELD)
		assert_eq(dreamer.defence, 10,
				"%s caused card effect to be doubled" % [effect])
		assert_eq(forgotten.get_card_count(), 1,
				"%s caused card to be forgotten" % [effect])
		execute_with_yield(cards[1])
		yield(yield_to(effect_node, "scripting_finished", 0.2), YIELD)
		yield(yield_to(cards[1], "scripts_executed", 2.2), YIELD)
		assert_eq(dreamer.defence, 20,
				"%s caused card effect to be doubled" % [effect])
		assert_eq(forgotten.get_card_count(), 2,
				"%s caused card to be forgotten" % [effect])
		var sceng = execute_with_yield(cards[2])
		if sceng is GDScriptFunctionState:
			sceng = yield(sceng, "completed")
#		yield(yield_for(1), YIELD)
		assert_freed(effect_node)
		assert_eq(dreamer.defence, 25,
				"%s third card effects not doubled" % [effect])
		assert_eq(forgotten.get_card_count(), 2,
				"%s third card not forgotten" % [effect])


class TestKeepEmComing:
	extends "res://tests/HUT_Ordeal_DreamerEffectsTestClass.gd"
	var effect: String = Terms.ACTIVE_EFFECTS.keep_em_coming.name
	var amount = 2
	func _init() -> void:
		globals.test_flags["test_initial_hand"] = true
		effects_to_play = [
			{
				"name": effect,
				"amount": amount,
			}
		]
		test_card_names = [
			"Confidence",
			"Confidence",
		]


	func test_effect():
		set_all_cards_to_script(FORGET_CARD_SCRIPT)
		var effect_node : CombatEffect = dreamer.active_effects.get_effect(effect)
		watch_signals(effect_node)
		execute_with_yield(cards[0])
		yield(yield_to(effect_node, "scripting_finished", 0.2), YIELD)
		assert_eq(hand.get_card_count(), 1 + amount,
				"%s drew correct amount of cards" % [effect])
		execute_with_yield(cards[1])
		yield(yield_to(effect_node, "scripting_finished", 0.2), YIELD)
		assert_eq(hand.get_card_count(), amount * 2,
				"%s drew correct amount of cards" % [effect])

class TestKnowYourLimits:
	extends "res://tests/HUT_Ordeal_DreamerEffectsTestClass.gd"
	var effect: String = Terms.ACTIVE_EFFECTS.know_your_limits.name
	var amount = 3
	func _init() -> void:
		effects_to_play = [
			{
				"name": effect,
				"amount": amount,
			}
		]
		test_card_names = [
			"Confidence",
			"Confidence",
		]


	func test_effect():
		set_all_cards_to_script(FORGET_CARD_SCRIPT)
		var effect_node : CombatEffect = dreamer.active_effects.get_effect(effect)
		watch_signals(effect_node)
		execute_with_yield(cards[0])
		yield(yield_to(effect_node, "scripting_finished", 0.2), YIELD)
		assert_eq(dreamer.active_effects.get_effect_stacks(Terms.ACTIVE_EFFECTS.armor.name), amount)
		execute_with_yield(cards[1])
		yield(yield_to(effect_node, "scripting_finished", 0.2), YIELD)
		assert_eq(dreamer.active_effects.get_effect_stacks(Terms.ACTIVE_EFFECTS.armor.name), amount * 2)

class TestStimulants:
	extends "res://tests/HUT_Ordeal_CardTestClass.gd"
	func _init() -> void:
		testing_card_name = "Stimulants"
		expected_amount_keys = [
			"effect_stacks",
			"effect_stacks2",
		]
		test_card_names = [
			"Stimulants",
			"Stimulants",
			"Stimulants",
		]

	func test_card_results():
		assert_has_amounts()
		card.move_to(forgotten)
		yield(yield_to(card, "scripts_executed", 0.3), YIELD)
		assert_eq(dreamer.active_effects.get_effect_stacks(Terms.ACTIVE_EFFECTS.buffer.name), get_amount("effect_stacks"))
		assert_eq(dreamer.active_effects.get_effect_stacks(Terms.ACTIVE_EFFECTS.protection.name), get_amount("effect_stacks2"))

	func test_card_moved_elsewhere():
		assert_has_amounts()
		card.move_to(discard)
		yield(yield_to(card, "scripts_executed", 0.3), YIELD)
		assert_eq(dreamer.active_effects.get_effect_stacks(Terms.ACTIVE_EFFECTS.buffer.name), 0)
		assert_eq(dreamer.active_effects.get_effect_stacks(Terms.ACTIVE_EFFECTS.protection.name), 0)

class TestSolidWorkEthic:
	extends "res://tests/HUT_Ordeal_CardTestClass.gd"
	func _init() -> void:
		testing_card_name = "Solid Work Ethic"
		globals.test_flags["test_initial_hand"] = true
		globals.test_flags["no_refill"] = false
		expected_amount_keys = [
			"detrimental_integer",
			"defence_amount",
		]

	func test_card_results():
		assert_has_amounts()
		var sceng = execute_with_yield(card)
		var selwindows = get_tree().get_nodes_in_group("selection_windows")
		assert_ne(selwindows.size(), 0)
		if not selwindows.size():
			return
		var selection_window : SelectionWindow = selwindows[0]
		yield(yield_to(selection_window, "selection_window_opened", 1), YIELD)
		var card_options = selection_window.get_all_card_options()
		selection_window.select_cards([0])
		assert_eq(card_options[0].get_parent(), forgotten, "Card Forgotten")
		assert_eq(dreamer.defence, get_amount("defence_amount"), "Gained Defence")

class TestWorkEthic:
	extends "res://tests/HUT_Ordeal_CardTestClass.gd"
	func _init() -> void:
		testing_card_name = "Work Ethic"
		globals.test_flags["test_initial_hand"] = true
		globals.test_flags["no_refill"] = false
		expected_amount_keys = [
			"detrimental_integer",
			"defence_amount",
		]

	func test_card_results():
		assert_has_amounts()
		var sceng = execute_with_yield(card)
		if sceng is GDScriptFunctionState:
			sceng = yield(sceng, "completed")
		assert_eq(forgotten.get_card_count(), 1, "One random card got forgotten")
		assert_eq(dreamer.defence, get_amount("defence_amount"), "Gained Defence")


class TestOvertime:
	extends "res://tests/HUT_Ordeal_CardTestClass.gd"
	func _init() -> void:
		testing_card_name = "Overtime"
		globals.test_flags["test_initial_hand"] = true
		globals.test_flags["no_refill"] = false
		expected_amount_keys = [
			"detrimental_integer",
			"effect_stacks",
		]

	func test_card_results():
		assert_has_amounts()
		var sceng = execute_with_yield(card)
		if sceng is GDScriptFunctionState:
			sceng = yield(sceng, "completed")
		assert_eq(forgotten.get_card_count(), 1, "One random card got forgotten")
		assert_eq(dreamer.active_effects.get_effect_stacks(Terms.ACTIVE_EFFECTS.strengthen.name), get_amount("effect_stacks"))
		assert_eq(dreamer.active_effects.get_effect_stacks(Terms.ACTIVE_EFFECTS.quicken.name), get_amount("effect_stacks2"))


class TestBurntOut:
	extends "res://tests/HUT_Ordeal_CardTestClass.gd"
	func _init() -> void:
		testing_card_name = "Burnt Out"
		globals.test_flags["test_initial_hand"] = true
		expected_amount_keys = [
			"draw_amount",
			"effect_stacks",
		]

	func test_card_results():
		assert_has_amounts()
		var sceng = execute_with_yield(card)
		if sceng is GDScriptFunctionState:
			sceng = yield(sceng, "completed")
		assert_eq(hand.get_card_count(), get_amount("draw_amount"), "Correct amount drawn")
		assert_eq(dreamer.active_effects.get_effect_stacks(Terms.ACTIVE_EFFECTS.armor.name), get_amount("effect_stacks"))



class TestOrganizing:
	extends "res://tests/HUT_Ordeal_CardTestClass.gd"
	func _init() -> void:
		testing_card_name = "Organizing"
		globals.test_flags["test_initial_hand"] = true

	func test_card_results():
		for iter in 3:
			add_single_card("Interpretation", forgotten)
		var sceng = execute_with_yield(card)
		if sceng is GDScriptFunctionState:
			sceng = yield(sceng, "completed")
		assert_eq(hand.get_card_count(), 3, "Correct amount drawn")
		assert_eq(counters.get_counter("immersion"), 6, "Dreamer gets immersion increased")



class TestTheGrind:
	extends "res://tests/HUT_Ordeal_CardTestClass.gd"
	func _init() -> void:
		testing_card_name = "The Grind"
		expected_amount_keys = [
			"detrimental_integer",
			"damage_amount",
		]

	func test_card_results():
		assert_has_amounts()
		var sceng = snipexecute(card, test_torment)
		if sceng is GDScriptFunctionState:
			sceng = yield(sceng, "completed")
		yield(yield_for(1), YIELD)
		assert_eq(hand.get_card_count(), get_amount("detrimental_integer"), "Correct amount spawned")
		assert_eq(test_torment.damage, tdamage(get_amount("damage_amount")),
				"%s dealt correct amount of interpretation" % [card.canonical_name])


class TestBurnItAllDown:
	extends "res://tests/HUT_Ordeal_CardTestClass.gd"
	func _init() -> void:
		testing_card_name = "Burn It All Down!"
		expected_amount_keys = [
			"damage_amount",
		]

	func test_card_results():
		assert_has_amounts()
		add_single_card("Interpretation", hand)
		add_single_card("Interpretation", hand)
		add_single_card("Confidence", hand)
		add_single_card("Butterfly", hand)
		add_single_card("Lacuna", hand)
		var sceng = snipexecute(card, test_torment)
		if sceng is GDScriptFunctionState:
			sceng = yield(sceng, "completed")
		assert_eq(hand.get_card_count(), 2, "Cards Forgotten")
		assert_eq(forgotten.get_card_count(), 3, "Cards Forgotten")
		assert_eq(test_torment.damage, tdamage(get_amount("damage_amount")),
				"%s dealt correct amount of interpretation" % [card.canonical_name])

